load("@com_github_bazelbuild_buildtools//buildifier:def.bzl", "buildifier")
load("@io_bazel_rules_docker//cc:image.bzl", "cc_image")
load(
    "@io_bazel_rules_docker//container:container.bzl",
    "container_image",
    "container_bundle"
)
load("//tools/thrax:defs.bzl", "compile_grm", "grm_export_fsts")

licenses(["notice"])  # Apache 2.0

exports_files([
    "LICENSE",
])

buildifier(
    name = "buildifier",
)

COMMON_COPTS = []

# TODO(rkjaran): Fix compile_grm/grm_library to support proper deps, so we don't
#     always recompile everthing and can use transitive deps
itn_grammars = glob(["src/itn/*.grm"])
itn_maps = glob(["src/itn/lex/*.txt"])
itn_common_data = itn_grammars + itn_maps

compile_grm(
    name = "byte",
    src = "src/itn/byte.grm",
)

compile_grm(
    name = "common",
    src = "src/itn/common.grm",
    data = ["src/itn/byte.grm"] + [
        ":byte",
    ],
)

compile_grm(
    name = "numbers",
    src = "src/itn/numbers.grm",
    data = itn_common_data + [
        ":byte",
        ":common",
    ],
)

compile_grm(
    name = "ordinals",
    src = "src/itn/ordinals.grm",
    data = itn_common_data + [
        ":byte",
        ":common",
        ":numbers",
    ],
)

compile_grm(
    name = "abbreviate",
    src = "src/itn/abbreviate.grm",
    data = [
        ":byte",
        ":common",
        ":numbers",
        ":ordinals",
    ] + itn_common_data,
)

grm_export_fsts(
    name = "abbreviate_fst",
    src = ":abbreviate",
    rules = ["ABBREVIATE", "ITN"],
    visibility = ["//test:__pkg__"],
)

cc_library(
    name = "tiro_speech",
    srcs = glob(
        [
            "src/**/*.cc",
            "src/**/*.h",
        ],
        exclude = ["src/bin/**"],
    ),
    copts = COMMON_COPTS,
    local_defines = [
        "TIRO_SPEECH_ENABLE_HTTP_URI",
    ],
    visibility = ["//test:__pkg__"],
    deps = [
        "//proto/tiro/speech/v1alpha:speech_cc_grpc",
        "@com_google_googleapis//google/cloud/speech/v1:speech_cc_grpc",
        "//third_party/webrtc:webrtcvad",
        "@com_github_grpc_grpc//:grpc++",
        "@com_github_grpc_grpc//:grpc++_reflection",
        "@com_google_googleapis//google/rpc:code_cc_proto",
        "@com_google_googleapis//google/rpc:error_details_cc_proto",
        "@com_google_googleapis//google/rpc:status_cc_proto",
        "@ffmpeg",
        "@fmt",
        "@kaldi",
        "@spdlog",
        "@pytorch//:torch_cpu",
        "@icu//:common",
        "@moodycamel_readerwriterqueue",
        "@org_opengrm_thrax//:thrax",
    ],
)

cc_binary(
    name = "prepare_lexicon_fst",
    srcs = [
        "src/bin/prepare_lexicon_fst_main.cc",
    ],
    deps = [
        ":tiro_speech",
    ],
)

cc_binary(
    name = "tiro_server_punctuate",
    srcs = [
        "src/bin/punctuate_main.cc",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":tiro_speech",
    ],
)

cc_binary(
    name = "tiro_speech_server",
    srcs = [
        "src/bin/server_main.cc",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":tiro_speech",
    ],
)

cc_image(
    name = "tiro_speech_server_image",
    base = "@ubuntu_impish_x86_64//image",
    binary = ":tiro_speech_server",
    visibility = ["//visibility:public"],
)

cc_binary(
    name = "tiro_speech_client",
    srcs = [
        "src/bin/client_main.cc",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//proto/tiro/speech/v1alpha:speech_cc_grpc",
        "@com_google_googleapis//google/cloud/speech/v1:speech_cc_grpc",
        "@com_github_grpc_grpc//:grpc++",
        "@com_google_googleapis//google/rpc:error_details_cc_proto",
        "@com_google_googleapis//google/rpc:status_cc_proto",
        "@com_github_nlohmann_json//:json",
    ],
)

cc_image(
    name = "tiro_speech_client_image",
    base = "@ubuntu_impish_x86_64//image",
    binary = ":tiro_speech_client",
    visibility = ["//visibility:public"],
)


container_image(
    name = "grpcwebproxy_image",
    tars = ["@grpcwebproxy//:grpcwebproxy"],
    entrypoint = ["./grpcwebproxy"],
    ports = ["8080"],
    visibility = ["//k8s:__pkg__"],
)

# This target creates a container image bundle tiro_speech_images.tar that can
# be loaded using `docker load`
container_bundle(
    name = "tiro_speech_images",
    images = {
        "tiro-speech-server:latest": ":tiro_speech_server_image",
        "tiro-speech-client:latest": ":tiro_speech_client_image",
    },
)
